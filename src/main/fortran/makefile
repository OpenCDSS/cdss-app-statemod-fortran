# Makefile for compiling StateMod using gfortran
# - initial version taken from Jim Brannon's work
# - significant updates to add documentation, help target, make portable
# - should be able to update to work with Windows, Linux, and Lahey compiler

# ======================================================================
# Declarations
# ======================================================================
# The compiler
FC = gfortran
# The flags for debugging or for maximum performance, comment as necessary

# -cpp
#
# Enable preprocessing. The preprocessor is automatically invoked if the file extension is
# .fpp, .FPP, .F, .FOR, .FTN, .F90, .F95, .F03 or .F08. Use this option to manually enable
# preprocessing of any kind of Fortran file.
#
# To disable preprocessing of files with any of the above listed extensions, use the negative form: -nocpp.
#
# The preprocessor is run in traditional mode. Any restrictions of the file-format,
# especially the limits on line length, apply for preprocessed output as well, so it might be
# advisable to use the -ffree-line-length-none or -ffixed-line-length-none options.
#------------
#
# -fcheck=bounds
#
# Enable generation of run-time checks for array subscripts and against the declared
# minimum and maximum values. It also checks array indices for assumed and deferred
# shape arrays against the actual allocated bounds and ensures that all string lengths
# are equal for character array constructors without an explicit typespec.
#
# Some checks require that -fcheck=bounds is set for the compilation of the main program.
#
# Note: In the future this may also include other forms of checking, e.g., checking substring references.
#------------
#
# -finit-local-zero
#
# The -finit-local-zero option instructs the compiler to initialize local INTEGER, REAL,
# and COMPLEX variables to zero, LOGICAL variables to false, and CHARACTER variables to a string of null bytes
#------------
#
# -fno-align-commons
#
# By default, gfortran enforces proper alignment of all variables in a COMMON block
# by padding them as needed. On certain platforms this is mandatory, on others it
# increases performance. If a COMMON block is not declared with consistent data types
# everywhere, this padding can cause trouble, and -fno-align-commons can be used to
# disable automatic alignment. The same form of this option should be used for all
# files that share a COMMON block. To avoid potential alignment issues in COMMON blocks,
# it is recommended to order objects from largest to smallest.
#------------
#
# -fno-automatic
#
# Treat each program unit (except those marked as RECURSIVE) as if the SAVE statement were
# specified for every local variable and array referenced in it. Does not affect common blocks.
# (Some Fortran compilers provide this option under the name -static or -save.)
# The default, which is -fautomatic, uses the stack for local variables smaller than the value
# given by -fmax-stack-var-size. Use the option -frecursive to use no static memory.
#------------
#
# -g 
#------------
#
# -static
#------------

#FFLAGS = -g -fbounds-check -fno-align-commons
# use -static especially for windows compiling 
#FFLAGS = -g -cpp -fbounds-check -fno-align-commons -static
FFLAGS = -g -cpp -fno-align-commons -static -fcheck=bounds -fno-automatic -finit-local-zero
#FFLAGS = -O2
# The flags for all cases (e.g. look for system .mod files, required in gfortran)
FFLAGS += -I/usr/include
# The libraries needed for linking
#LDFLAGS = -li_need_this_lib
# The list of executables to be built within the package
PROGRAMS = statemod

# Set the source modules based on the operating system and compiler
# - this allows this single makefile to work in multiple development environments (as long as GNU make is used)
# - currently the focus is gfortran on Windows but could get from the environment and change modules

# Compiler-specific routines to handle command line parsing and date/time processing
ifeq ($(FC),gfortran)
	# gfortran code version
	parse_o_file = parse_gfortran.o
	dattim_o_file = dattim_gfortran.o
else
	# Legacy Lahey code version
	parse_o_file = parse.o
	dattim_o_file = dattim.o
endif

# Operating-system-specific code
# - Although there are other options, initially use code from Jim Brannon
# - OS environment variable is specific to Windows (assuming the compile occurs
#   in a Windows command shell) so if set assume Windows

ifdef OS
	# Assume Windows legacy naming convention
	getpath_o_file = getpath.o
	putpath_o_file = putpath.o 
else
	# Assume Linux
	getpath_o_file = getpath_linux.o
	putpath_o_file = putpath_linux.o 
endif

# ======================================================================
# Main targets
# ======================================================================

# all: compile all programs
# - the default if make is called without arguments
# - may want to change so default is 'help'
all: $(PROGRAMS)

# help: print the targets that are available
help:
	@echo "-----------------------------------------------------------------------"
	@echo "StateMod makefile targets:"
	@echo ""
	@echo "all        Default target to compile all programs, currently only"
	@echo "           statemod but could include utility programs in the future."
	@echo "clean      Remove dynamically created files (but not final executable)."
	@echo "help       Print this message."
	@echo "veryclean  Make the 'clean' target, and also remove the final executable."
	@echo ""
	@echo "file.o     Compile the source file.for file into object file,"
	@echo "           useful to check syntax for a single file."
	@echo "-----------------------------------------------------------------------"
	@echo "Makefile variables that are used:"
	@echo ""
	@echo "FC (compiler) = $(FC)"
	@echo "-----------------------------------------------------------------------"
	@echo "Environment variables that are used:"
	@echo ""
	@echo "OS (to determine operating system) = $(OS)"
	@echo "-----------------------------------------------------------------------"

# Dependencies for object files
# - because statemod is the main output (not library, etc.) only concern is the include file
# - need to make this simpler, but something like makedepends may be too much
# - not every file depends on common.inc (do `grep -i common.inc *.for` to find)
bintop.o: common.inc
bomsec.o: common.inc
calldat.o: common.inc
carrpl.o: common.inc
closs.o: common.inc
datinp.o: common.inc
daydivo.o: common.inc
dayest.o: common.inc
daymon.o: common.inc
dayoutr.o: common.inc
dayrate.o: common.inc
dayreso.o: common.inc
dayset.o: common.inc
daywelo.o: common.inc
demand.o: common.inc
demcons.o: common.inc
deplete.o: common.inc 
depletep.o: common.inc
directby.o: common.inc
directex.o: common.inc
directfs.o: common.inc
directwr.o: common.inc
divalt.o: common.inc
divcar.o: common.inc
divcar1.o: common.inc
divcar2.o: common.inc
divcarl.o: common.inc
divcarr.o: common.inc
divimpr.o: common.inc
divimpr2.o: common.inc
divmulti.o: common.inc
divres.o: common.inc
divresp.o: common.inc
divresp2.o: common.inc
divresr.o: common.inc
divrig.o: common.inc
divrigs.o: common.inc
divrpl.o: common.inc
divrplp2.o: common.inc
divrplp.o: common.inc
divrplr.o: common.inc
dsamod.o: common.inc
evasec.o: common.inc                      
execut.o: common.inc
getcall.o: common.inc
getdiv.o: common.inc
getdiv2.o: common.inc
geteomx.o: common.inc      
getid.o: common.inc
getipy2.o: common.inc
getipy4.o: common.inc
getpar.o: common.inc
getpln.o: common.inc
getplnr.o: common.inc
getplnw.o: common.inc
getrep.o: common.inc
getres.o: common.inc
getres2.o: common.inc
getrig.o: common.inc
getrtnx.o: common.inc
getsta.o: common.inc
getwel.o: common.inc
getwel2.o: common.inc
gwsub.o: common.inc
ifrdown.o: common.inc
ifrrig.o: common.inc
ifrrig2.o: common.inc
ifrrigsp.o: common.inc
ifrrigx.o: common.inc
intersup.o: common.inc
mdainp.o: common.inc
oopbook.o: common.inc
oopbook2.o: common.inc
oopdiv.o: common.inc
oprfind.o: common.inc
oprinp.o: common.inc
ouflow.o: common.inc
outbal2.o: common.inc
outcall.o: common.inc
outcallr.o: common.inc
outcalls.o: common.inc
outcu.o: common.inc
outdeb.o: common.inc
outdivc.o: common.inc
outdivw.o: common.inc
outgvc.o: common.inc
outichk.o: common.inc
outifr.o: common.inc
outmon.o: common.inc
outopr.o: common.inc
outpln.o: common.inc
outplnmo.o: common.inc
outplnw.o: common.inc
outpltd.o: common.inc
outpltr.o: common.inc
outpltw.o: common.inc
outrch.o: common.inc
outrchr.o: common.inc
outres.o: common.inc
outresc.o: common.inc
outrev.o: common.inc
outrg.o: common.inc
outriv.o: common.inc
outsp.o: common.inc
outspd.o: common.inc
outsum.o: common.inc
outsys.o: common.inc
outsyt.o: common.inc
outsyta.o: common.inc
outtbl.o: common.inc
outtop.o: common.inc
outwel.o: common.inc
outwelc.o: common.inc
outwelp.o: common.inc
outwr.o: common.inc
outwr2.o: common.inc
outxss.o: common.inc
outxssmo.o: common.inc
planeva.o: common.inc                      
powres.o: common.inc
powres2.o: common.inc
powresp.o: common.inc
powsea.o: common.inc
powseap.o: common.inc
powsear.o: common.inc
replace.o: common.inc
report.o: common.inc
resoop.o: common.inc
resrg1.o: common.inc
resrg1p.o: common.inc
resrg2.o: common.inc
resrgp.o: common.inc
resrpl.o: common.inc
rgrg.o: common.inc
riginp.o: common.inc
rigsor.o: common.inc
rivrtn.o: common.inc
rsrspu.o: common.inc
rsrspup.o: common.inc
rtnmax.o: common.inc
rtnmaxe.o: common.inc
rtnsec.o: common.inc
rtnsecc.o: common.inc
rtnsecm.o: common.inc
rtnsecp.o: common.inc
rtnsecr.o: common.inc
rtnsecrp.o: common.inc
rtnsecw.o: common.inc
rtnsecwp.o: common.inc
rtnsecx.o: common.inc
rtnxcu.o: common.inc
rtnxcup.o: common.inc
sepsec.o: common.inc
setdem.o: common.inc
seteff.o: common.inc
setgw.o: common.inc        
setplano.o: common.inc
sjrip.o: common.inc       
soilm.o: common.inc
splatte.o: common.inc
spruse.o: common.inc
statem.o: common.inc
vircom.o: common.inc
virgain.o: common.inc 
virgen.o: common.inc
virin.o: common.inc
virnod.o: common.inc
virout.o: common.inc
virset.o: common.inc
welaugp.o: common.inc
welprity.o: common.inc
welrech.o: common.inc
welrig3.o: common.inc
welrig3p.o: common.inc
xdebug.o: common.inc

# The rule for building the statemod executable
# - all source modules are listed as dependencies
# - interdependencies are not accounted for, just the main program requirements
# - the following were in Jim Brannon's code and have been integrated more generically:
#
#	parse_gfortran.o
#	dattim_gfortran.o
#
#	getpath_windows.o
#	putpath_windows.o 
#
statemod: \
	statem.o \
		namext.o \
		$(parse_o_file) \
		$(getpath_o_file) \
		gnu.o \
		skipn.o \
		getfn.o \
		setpar.o \
		virgen.o \
		execut.o \
		report.o \
		xdebug.o \
			accdiv.o \
			accou.o \
			adjcase.o \
			average.o \
			bintop.o \
			bomsec.o \
			calldat.o \
			carrpl.o \
			chekav2.o \
			chekava.o \
			chekpor.o \
			chekres.o \
			chekts.o \
			chkavail.o \
			chkavail2.o \
			chkprf.o \
			chkver.o \
			closs.o \
			coeffa.o \
			comment.o \
			count.o \
			datinp.o \
			$(dattim_o_file) \
			daydata.o \
			daydist.o \
			daydivo.o \
			dayest.o \
			daymon.o \
			dayoutr.o \
			dayreso.o \
			dayset.o \
			daywelo.o \
			demand.o \
			demcons.o \
			deplete.o \
			depletep.o \
			directby.o \
			directex.o \
			directfs.o \
			directwr.o \
			divalt.o \
			divcar.o \
			divcarl.o \
			divcarr.o \
			divcar1.o \
			divcar2.o \
			divimpr.o \
			divimpr2.o \
			divmulti.o \
			divres.o \
			divresp2.o \
			divresr.o \
			divrig.o \
			divrigs.o \
			divrpl.o \
			divrplp.o \
			divrplp2.o \
			divrplr.o \
			dnmfso.o \
			dnmfsow.o \
			dnmfso2.o \
			dsamod.o \
			evasec.o \
			getcall.o \
			getctlc.o \
			getdiv.o \
			getdiv2.o \
			geteomx.o \
			getfile.o \
			getid.o \
			getin.o \
			getipy2.o \
			getipy4.o \
			getpar.o \
			getpln.o \
			getplnr.o \
			getplnw.o \
			getrch.o \
			getrep.o \
			getres.o \
			getres2.o \
			getrig.o \
			getrtn.o \
			getrtnx.o \
			getrtnw.o \
			getrtnw2.o \
			getsta.o \
			getwel.o \
			getwel2.o \
			getver.o \
			gwsub.o \
			ifrdown.o \
			ifrrig.o \
			ifrrigsp.o \
			ifrrigx.o \
			ifrrig2.o \
			interp.o \
			intersup.o \
			mdainp.o \
			oopbook2.o \
			oopdiv.o \
			oprdown.o \
			oprexp.o \
			oprfind.o \
			oprinout.o \
			oprinp.o \
			ouflow.o \
			outbal2.o \
			outcallr.o \
			outcalls.o \
			outcu.o \
			outdeb.o \
			outdivc.o \
			outdivw.o \
			outgvc.o \
			outichk.o \
			outifr.o \
			outmon.o \
			outopr.o \
			outpln.o \
			outplnmo.o \
			outpltd.o \
			outpltr.o \
			outpltw.o \
			outrch.o \
			outrchr.o \
			outres.o \
			outresc.o \
			outrev.o \
			outrg.o \
			outriv.o \
			outsp.o \
			outspd.o \
			outsys.o \
			outsyt.o \
			outsyta.o \
			outtbl.o \
			outtop.o \
			outwel.o \
			outwelc.o \
			outwelp.o \
			outwr2.o \
			outxss.o \
			outxssmo.o \
			planeva.o \
			powrig.o \
			powres.o \
			powresp.o \
			powres2.o \
			powsea.o \
			powseap.o \
			powsear.o \
			$(putpath_o_file) \
			replace.o \
			repsort.o \
			resrgp.o \
			resrg1.o \
			resrg1p.o \
			resrpl.o \
			return.o \
			return2.o \
			riginp.o \
			rigsor.o \
			rivrtn.o \
			rgrg.o \
			roundof.o \
			rsrspu.o \
			rsrspup.o \
			rtncarry.o \
			rtnmax.o \
			rtnmaxe.o \
			rtnsec.o \
			rtnsecc.o \
			rtnsecp.o \
			rtnsecr.o \
			rtnsecrp.o \
			rtnsecw.o \
			rtnsecwp.o \
			rtnsecx.o \
			rtnxcu.o \
			rtnxcup.o \
			sepsec.o \
			setcarl.o \
			setdem.o \
			seteff.o \
			setgw.o \
			setlimit.o \
			setloss.o \
			setplano.o \
			setqdiv.o \
			setqdivc.o \
			setqdivx.o \
			settc.o \
			sjrip.o \
			skip.o \
			soilcu.o \
			soilin.o \
			soilm.o \
			somnmy.o \
			splatte.o \
			spruse.o \
			stafind.o \
			takout.o \
			takou2.o \
			vircom.o \
			virgain.o \
			virin.o \
			virnod.o \
			virout.o \
			virset.o \
			welaugp.o \
			welprity.o \
			welrech.o \
			welrig3.o \
			welrig3p.o \
			year.o \
			year2.o
	$(FC) $(FFLAGS) -o statemod $^ $(LDFLAGS)

# ======================================================================
# The general rules.  These generally should not require modification.
# ======================================================================

# General rule for building prog from prog.o; $^ (GNU extension) is
# used in order to list additional object files on which the
# executable depends
%: %.o
	$(FC) $(FFLAGS) -o $@ $^ $(LDFLAGS)

# General rules for compiling source files into object files.
#
# % = wildcard to match file basename
# $< = source file name

# Compile files with extension .f90 into .o object files
%.o: %.f90
	$(FC) $(FFLAGS) -c $<

# Compile files with extension .F90 into .o object files
%.o: %.F90
	$(FC) $(FFLAGS) -c $<

# Compile files with extension .for into .o object files
%.o: %.for
	$(FC) $(FFLAGS) -c $<

# Utility targets
.PHONY: clean veryclean

# Remove intermediate files used when compiling
clean:
	rm -f *.o *.mod *.MOD

# Remove all intermediate files and the final executable
veryclean: clean
	rm -f *~ $(PROGRAMS)
